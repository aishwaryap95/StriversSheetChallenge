class Solution {
    public int uniquePaths(int m, int n) {
        int N = n + m - 2;
            int r = m - 1; 
            double res = 1;
            
            for (int i = 1; i <= r; i++)
                res = res * (N - r + i) / i;
                
            return (int)res;
    }
}

----------------------------------------------------------------------

class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m+1][n+1];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = -1;
            }
        }

        int num = countPaths(0,0,m,n,dp);
        if(m == 1 && n==1) return num;
        return dp[0][0];
    }
    private int countPaths(int i, int j, int n, int m, int dp[][]){
        if(i == (n-1) && j == (m-1)) return 1;
        if(i >= n && j>= m) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        else return dp[i][j] = countPaths(i+1, j, n, m, dp) +
                            countPaths(i, j+1, n, m, dp);
    }
}
