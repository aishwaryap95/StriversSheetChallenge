class Solution {
    
    public static int findMinLength(String S[], int n)
    {
        int min = Integer.MAX_VALUE;
        for (int i = 0; i <= (n - 1); i++) 
        {
            if (S[i].length() < min) {
                min = S[i].length();
            }
        }
        return min;
    }
  
    public static boolean allContainsPrefix(String S[], int n, 
                         String str, int start, int end)
    {
        for (int i = 0; i <= (n - 1); i++)
        {
            String S_i = S[i];
              
            for (int j = start; j <= end; j++)
                if (S_i.charAt(j) != str.charAt(j))
                    return false;
        }
        return true;
    }
  
    public static String longestCommonPrefix(String S[], int n)
    {
        int index = findMinLength(S, n);
        String prefix = ""; 
        int low = 0, high = index-1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
  
            if (allContainsPrefix(S, n, S[0], low,
                                                  mid))
            {
                prefix = prefix + S[0].substring(low, mid + 1);
                low = mid + 1;
            } 
            else 
            {
                high = mid - 1;
            }
        }
  
        return prefix;
    }
}
