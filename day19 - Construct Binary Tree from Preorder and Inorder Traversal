class Solution {
    public TreeNode makeTree(int preorder[], int prestart, int preend, 
            int inorder[],int instart, int inend, HashMap<Integer,Integer> inMap){
                
        if(prestart > preend || instart > inend) return null;
        
        TreeNode root = new TreeNode (preorder[prestart]);
        int inroot = inMap.get(root.val);
        int numsleft = inroot - instart;
        
        root.left = makeTree(preorder, prestart+1, prestart+numsleft, inorder, instart, inroot-1, inMap);
        root.right = makeTree(preorder, prestart+numsleft+1, preend, inorder, inroot+1, inend, inMap);
        
        return root;
    }
    public TreeNode buildTree(int preorder[], int inorder[])
    {
        HashMap<Integer, Integer> inMap = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            inMap.put( inorder[i], i);
        }
        TreeNode root = makeTree(preorder, 0, preorder.length-1,
                            inorder, 0, inorder.length-1, inMap);
        return root;
    }
}
