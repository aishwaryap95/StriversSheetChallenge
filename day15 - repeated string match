class Solution {
    final long p = 29;
    final long mod = 1000000007;
    
    public int repeatedStringMatch(String a, String b) {
        StringBuilder sb = new StringBuilder();
        int cnt = 0;
        while (sb.length() < b.length()) {
            sb.append(a);
            cnt++;
        }
        
        if (a.equals(b)) {
            return cnt;
        } else if (rabinKarp(sb.toString(), b) != -1) {
            return cnt;
        } else if (rabinKarp(sb.toString() + a, b) != -1) {
            return cnt + 1;
        }
        
        return -1;
    }
    
    int rabinKarp(String a, String b) {
        int m = a.length();
        int n = b.length();
        int hash = generateHash(b);
        
        long pow = p;
        long[] rollingHash = new long[m];
        rollingHash[0] = (a.charAt(0) - 'a' + 1);
        long[] pows = new long[m];
        pows[0] = 1;
        
        for (int i = 1; i < m; i++) {
            char ch = a.charAt(i);
            pows[i] = (pows[i - 1] * p) % mod;
            rollingHash[i] = (rollingHash[i - 1] + (ch - 'a' + 1) * pows[i]) % mod;
        }
        
        int i = 1;
        if (rollingHash[n - 1] == hash) {
            return 0;
        }
        
        for (; i <= m - n; i++) {
            long temp = rollingHash[i + n - 1] - rollingHash[i - 1];
            if (temp == (hash * pows[i]) % mod) {
                return 0;
            }
        }
        
        return -1;
    }
    
    int generateHash(String a) {
        long hash = 0;
        long pow = 1;
        
        for (int i = 0; i < a.length(); i++) {
            char ch = a.charAt(i);
            hash = (hash + (ch - 'a' + 1) * pow) % mod;
            pow = (pow * p) % mod;
        }
        
        return (int) hash;
    }
}
