class Solution
{
    public static long merge(long arr[],long temp[] , int start, int mid,int end){
        long invCnt = 0;
        
        int i = start;
        int j = mid;
        int k = start;
        
        while((i<=mid-1) && (j<=end)){
            if(arr[i] <= arr[j]){
                temp[k++] = arr[i++];
            }
            else{
                temp[k++] = arr[j++];
                invCnt += (mid-i);
            }
        }
        while(i <= (mid-1)){
            temp[k++] = arr[i++];
        }
        while(j <= end){
            temp[k++] = arr[j++];
        }
        for(i = start;i <= end;i++){
            arr[i] = temp[i];
        }
        return invCnt;
    }
    private static long merge_sort(long arr[],long tmp[],int start,int end){
        long invCnt = 0;
        if(start < end){
            int mid = (start+end)/2;
            invCnt += merge_sort(arr,tmp,start,mid);
            invCnt += merge_sort(arr,tmp,mid+1,end);
            invCnt += merge(arr,tmp,start,mid+1,end);
        }
        return invCnt;
    }
    static long inversionCount(long arr[], long N)
    {
        int len = (int)N;
        long tmp[] = new long[(int)N];
        return merge_sort(arr,tmp,0,len-1);
    }
}
