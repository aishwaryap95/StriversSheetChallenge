class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    //Using Prim's
	    
        boolean vis[]=new boolean[V];
        
        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y)->x.wt - y.wt);
        pq.add(new Pair(0,0));
        
        int ans=0;
        
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        
        for(int i=0;i<V;i++)    adj.add(new ArrayList<Pair>());
        
         for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][1],edges[i][2]));
            adj.get(edges[i][1]).add(new Pair(edges[i][0],edges[i][2]));
        }
        
        while(pq.size()!=0){
            Pair cur=pq.remove();
            
            int v=cur.v;
            if(vis[v]){
                continue;
            }
            ans+=cur.wt;
            vis[v]=true;
             for(Pair e:adj.get(v)){
                if(!vis[e.v]){
                    pq.add(new Pair(e.v,e.wt));
                }
            }
        }
        return ans;
    }
}	    
class Pair{
    int wt;
    int v;
    Pair(int v, int wt){
        this.v=v;
        this.wt=wt;
    }
}
