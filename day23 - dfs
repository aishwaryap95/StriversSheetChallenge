import java.util.ArrayList;

public class Solution {
    private static void dfs(int node, ArrayList<ArrayList<Integer>>
     adj, boolean vis[], ArrayList<Integer> ds){
    
        //v is startingVertex
        vis[node] = true;
        ds.add(node);

        for(int it : adj.get(node)){
             if(vis[it] != true){
                 dfs(it, adj, vis, ds);
             }
        }
     }
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
       
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>> ();

        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Integer>());
        }

        for(int i=0;i<edges.size();i++){
            int a = edges.get(i).get(0);
            int b = edges.get(i).get(1);
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        
        //call dfs
        boolean vis[] = new boolean[v];
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        
        
        for(int i=0;i<v;i++){
            if(vis[i] == false){
                ArrayList<Integer> ds = new ArrayList<Integer>();
                dfs(i, adj, vis, ds);
                res.add(ds);
            }
        }
        return res;
    }
}
