class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root , 0));

        int ans = 0;

        while(!q.isEmpty()){
            int min = q.peek().num;
            int size = q.size();
            int first = 0, last = 0;
            for(int i=0;i<size;i++){
                int id = q.peek().num - 1;
                TreeNode node = q.peek().node;
                q.poll();
                if(i == 0) first = id;
                if(i == size-1)  last = id;

                if(node.left != null) q.add(new Pair(node.left, id*2+1));
                if(node.right != null) q.add(new Pair(node.right, id*2+2)); 
            }
            ans = Math.max(ans, last-first+1);
        }
        return ans;
    }
}
class Pair{
    int num;
    TreeNode node;
    public Pair(TreeNode _node, int _num){
        node = _node;
        num = _num;
    }
}
